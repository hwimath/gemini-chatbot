const fs = require('fs');
const path = require('path');

const dataDir = path.join(process.cwd(), 'data');
const outputDir = path.join(process.cwd(), 'lib');
const outputPath = path.join(outputDir, 'toeicData.js');

// --- 정답 데이터 ---
// 제공된 파일에는 정답이 없으므로, 퀴즈 기능을 위해 여기에 정답을 정의합니다.
// 이 부분은 나중에 직접 수정하여 정답을 관리하실 수 있습니다.
const answers = {
    '1-101': 'B', '1-102': 'C', '1-103': 'C', '1-104': 'C', '1-105': 'B', '1-106': 'C', '1-107': 'A', '1-108': 'A', '1-109': 'A', '1-110': 'A',
    '2-101': 'C', '2-102': 'D', '2-103': 'B', '2-104': 'C', '2-105': 'D', '2-106': 'C', '2-107': 'D', '2-108': 'A', '2-109': 'A', '2-110': 'A',
    '3-101': 'A', '3-102': 'C', '3-103': 'B', '3-104': 'B', '3-105': 'D', '3-106': 'D', '3-107': 'A', '3-108': 'A', '3-109': 'A', '3-110': 'B',
};

function parseProblemFiles() {
    const problems = [];
    const problemFiles = fs.readdirSync(dataDir).filter(file => file.startsWith('토익앱용'));

    for (const file of problemFiles) {
        const content = fs.readFileSync(path.join(dataDir, file), 'utf-8');
        const sourceName = file.replace('토익앱용 최신기출문제집 ', '토익 기출문제').replace('.txt', '');
        
        // 정규식을 사용하여 문제 블록을 추출합니다.
        const problemBlocks = content.split(/\n(?=\d{3}\.)/).filter(block => block.trim() !== '');

        for (const block of problemBlocks) {
            const lines = block.trim().split('\n').filter(line => line.trim() !== '');
            if (lines.length < 5) continue;

            const questionLine = lines[0];
            const options = lines.slice(1, 5);

            const idMatch = questionLine.match(/^(\d{3})\./);
            if (!idMatch) continue;
            
            const problemId = `${sourceName.match(/\d/)[0]}-${idMatch[1]}`;
            const questionText = questionLine.replace(/^\d{3}\.\s*/, '').trim();

            // 임시로 문법/어휘를 구분합니다. (나중에 더 정교하게 만들 수 있습니다)
            const type = (parseInt(idMatch[1]) % 2 === 0) ? 'vocab' : 'grammar';

            problems.push({
                id: problemId,
                source: sourceName,
                type: type,
                question: questionText,
                options: options.map(opt => opt.trim()),
                answer: answers[problemId] || 'A', // 정답이 없으면 A로 기본값
            });
        }
    }
    return problems;
}

function parseGrammarFile() {
    const skills = {};
    const grammarFile = '101문법스킬 전차책.txt';
    if (!fs.existsSync(path.join(dataDir, grammarFile))) return skills;

    const content = fs.readFileSync(path.join(dataDir, grammarFile), 'utf-8');
    
    // 정규식을 사용하여 SKILL 블록을 추출합니다.
    const skillMatches = content.matchAll(/SKILL\s*(\d+)\)([\s\S]*?)(?=\n\s*SKILL|\n\s*TEST|$)/g);

    for (const match of skillMatches) {
        const skillId = `SKILL ${match[1]}`;
        // 실제 스킬 설명 텍스트를 더 정교하게 파싱해야 할 수 있습니다.
        const skillDescription = match[2].split('\n').map(l => l.trim()).filter(l => l).join(' ');
        skills[skillId] = skillDescription;
    }
    return skills;
}


function generateDataFile() {
    console.log('Generating TOEIC data file...');
    
    const problems = parseProblemFiles();
    const skills = parseGrammarFile();

    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    const fileContent = `
// This file is auto-generated by scripts/parse-data.js
// Do not edit this file directly.
// Edit the .txt files in the /data directory instead.

export const toeicProblems = ${JSON.stringify(problems, null, 2)};

export const grammarSkills = ${JSON.stringify(skills, null, 2)};
`;

    fs.writeFileSync(outputPath, fileContent, 'utf-8');
    console.log(`Successfully generated ${outputPath} with ${problems.length} problems.`);
}

generateDataFile();
